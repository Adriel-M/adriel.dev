---
import 'photoswipe/style.css'

import type { GetImageResult, ImageMetadata } from 'astro'
import { getImage, Image } from 'astro:assets'

interface Props {
  images: Record<string, () => Promise<{ default: ImageMetadata }>>
}

const { images } = Astro.props

const resolvedImages: { default: ImageMetadata }[] = await Promise.all(
  Object.values(images).map((loadFn) => loadFn())
)

const optimizedImages: {
  original: ImageMetadata
  optimized: GetImageResult
}[] = await Promise.all(
  resolvedImages.map(async ({ default: metadata }) => {
    const optimized = await getImage({
      src: metadata,
      width: metadata.width,
      format: 'webp',
    })

    return { original: metadata, optimized }
  })
)
---

<image-gallery class="grid grid-cols-2 gap-4 md:grid-cols-2 lg:grid-cols-3">
  {
    optimizedImages.map(({ original, optimized }) => (
      <a
        href={optimized.src}
        data-pswp-width={original.width}
        data-pswp-height={original.height}
        target="_blank"
      >
        <Image
          src={original}
          height={600}
          alt="Gallery Preview Image"
          class="not-prose aspect-3/2 object-cover"
        />
      </a>
    ))
  }
</image-gallery>

<script>
  import type PhotoSwipeLightbox from 'photoswipe/lightbox'

  class ImageGallery extends HTMLElement {
    lightbox?: PhotoSwipeLightbox

    async connectedCallback() {
      const { default: PhotoSwipeLightbox } = await import('photoswipe/lightbox')

      this.lightbox = new PhotoSwipeLightbox({
        gallery: this,
        children: 'a',
        showHideAnimationType: 'none',
        zoomAnimationDuration: false,
        pswpModule: () => import('photoswipe'),
      })
      this.lightbox.init()
    }

    disconnectedCallback() {
      this.lightbox?.destroy()
    }
  }

  customElements.define('image-gallery', ImageGallery)
</script>
